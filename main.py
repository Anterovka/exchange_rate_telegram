import logging
import requests
import matplotlib.pyplot as plt
import numpy as np
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from apscheduler.schedulers.asyncio import AsyncIOScheduler
import pytz

API_TOKEN = '–≤–∞—à_—Ç–æ–∫–µ–Ω_–±–æ—Ç–∞' # –£–∫–∞–∂–∏—Ç–µ —Ç–æ–∫–µ–Ω —Ç–µ–ª–µ–≥—Ä–∞–º–º –±–æ—Ç–∞ –∏–∑ BotFather
CHANNEL_ID = '–≤–∞—à_id_–∫–∞–Ω–∞–ª–∞'  # –£–∫–∞–∂–∏—Ç–µ –≤–∞—à –∫–∞–Ω–∞–ª
NEWS_API_KEY = '–≤–∞—à_api_–∫–ª—é—á_–Ω–æ–≤–æ—Å—Ç–µ–π'  # –í–∞—à API-–∫–ª—é—á –æ—Ç NewsAPI

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)
scheduler = AsyncIOScheduler()

# –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤—Ä–µ–º–µ–Ω–Ω—É—é –∑–æ–Ω—É –¥–ª—è –º–æ—Å–∫–æ–≤—Å–∫–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏
moscow_tz = pytz.timezone('Europe/Moscow')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
async def fetch_currency_rates():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –æ—Ç –¶–ë –†–§
    url = 'https://www.cbr-xml-daily.ru/daily_json.js'
    response = requests.get(url)
    data = response.json()
    
    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"Response from API: {data}")

    if response.status_code == 200 and 'Valute' in data:
        rates = data['Valute']
        # –í—ã–±–∏—Ä–∞–µ–º —Ç–æ–ª—å–∫–æ –Ω—É–∂–Ω—ã–µ –≤–∞–ª—é—Ç—ã
        currencies = {
            'USD': '–î–æ–ª–ª–∞—Ä –°–®–ê',
            'EUR': '–ï–≤—Ä–æ',
            'CNY': '–Æ–∞–Ω—å',
            'RUB': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å'
        }
        
        message = "üìà <b>–ö—É—Ä—Å—ã –≤–∞–ª—é—Ç:</b>\n"
        for code, name in currencies.items():
            if code in rates:
                rate = rates[code]['Value']
                message += f"- <b>{name}</b>: <b>{rate} ‚ÇΩ</b>\n"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –æ—Ç CoinGecko
        crypto_url = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,the-open-network,solana&vs_currencies=usd,rub,cny,eur&include_24hr_change=true'
        crypto_response = requests.get(crypto_url)
        crypto_data = crypto_response.json()

        # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logging.info(f"Response from CoinGecko: {crypto_data}")

        if crypto_response.status_code == 200:
            message += "\nüíπ <b>–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:</b>\n"
            for crypto, info in crypto_data.items():
                rate_usd = info['usd']
                rate_rub = info['rub']
                rate_eur = info['eur']
                rate_cny = info['cny']
                change = info['usd_24h_change']  # –ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞ –ø–æ –æ—Ç–Ω–æ—à–µ–Ω–∏—é –∫ –¥–æ–ª–ª–∞—Ä—É

                        # –ò–∑–º–µ–Ω–∏—Ç–µ –≤—ã–≤–æ–¥ –¥–ª—è TonCoin
                if crypto == 'the-open-network':  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ 'the-open-network'
                    crypto_name = 'TonCoin'
                else:
                    crypto_name = crypto.capitalize()

                message += f"<b>{crypto_name}</b>:\n"
                message += f"  - <b>RUB</b>: <b>{rate_rub}‚ÇΩ</b>\n"
                message += f"  - <b>USD</b>: <b>{rate_usd}$</b>\n"
                message += f"  - <b>EUR</b>: <b>{rate_eur}‚Ç¨</b>\n"
                message += f"  - <b>CNY</b>: <b>{rate_cny}¬•</b>\n"
                message += f"  - <b>–ò–∑–º–µ–Ω–µ–Ω–∏–µ –∑–∞ 24 —á–∞—Å–∞</b>: <b>{change:.2f}%</b>\n\n"

            # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
            await create_crypto_chart()

            # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
            news = await fetch_news()

            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–æ–º –∏ –Ω–æ–≤–æ—Å—Ç—è–º–∏
            with open('crypto_chart.png', 'rb') as photo:
                await bot.send_photo(CHANNEL_ID, photo, caption=message + "üì∞ <b>–ù–æ–≤–æ—Å—Ç–∏:</b>\n" + news, parse_mode='HTML')

        else:
            await bot.send_message(CHANNEL_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.", parse_mode='HTML')
    else:
        await bot.send_message(CHANNEL_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.", parse_mode='HTML')


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
async def create_crypto_chart():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    historical_data_url = 'https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=1'
    historical_response = requests.get(historical_data_url)
    historical_data = historical_response.json()

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"Response from historical data API: {historical_data}")

    if historical_response.status_code == 200 and 'prices' in historical_data:
        prices = historical_data['prices']
        timestamps = [price[0] for price in prices]
        values = [price[1] for price in prices]

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç datetime
        times = [np.datetime64(ts, 'ms') for ts in timestamps]

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.figure(figsize=(10, 5))
        plt.plot(times, values, color='blue')
        plt.title('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã Bitcoin –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (USD)')
        plt.xlabel('–í—Ä–µ–º—è')
        plt.ylabel('–¶–µ–Ω–∞ (USD)')
        plt.xticks(rotation=45)
        plt.grid()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.savefig('crypto_chart.png')
        plt.close()
    else:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö
async def fetch_news():
    url = f'https://newsapi.org/v2/everything?q=cryptocurrency&apiKey={NEWS_API_KEY}&language=ru'
    response = requests.get(url)
    news_data = response.json()

    # –õ–æ–≥–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
    logging.info(f"Response from NewsAPI: {news_data}")

    if response.status_code == 200 and 'articles' in news_data:
        articles = news_data['articles']
        news_messages = []
        for article in articles[:5]:  # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 5 –Ω–æ–≤–æ—Å—Ç–µ–π
            title = article['title']
            url = article['url']
            news_messages.append(f"- <a href='{url}'>{title}</a>")
        return "\n".join(news_messages)
    else:
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –Ω–æ–≤–æ—Å—Ç–∏."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏
async def daily_summary():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç
    url = 'https://www.cbr-xml-daily.ru/daily_json.js'
    response = requests.get(url)
    data = response.json()
    
    if response.status_code == 200 and 'Valute' in data:
        rates = data['Valute']
        currencies = {
            'USD': '–î–æ–ª–ª–∞—Ä –°–®–ê',
            'EUR': '–ï–≤—Ä–æ',
            'CNY': '–Æ–∞–Ω—å',
            'RUB': '–†–æ—Å—Å–∏–π—Å–∫–∏–π —Ä—É–±–ª—å'
        }
        
        message = "üìà <b>–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–≤–æ–¥–∫–∞ –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç:</b>\n"
        for code, name in currencies.items():
            if code in rates:
                rate = rates[code]['Value']
                message += f"- <b>{name}</b>: <b>{rate} ‚ÇΩ</b>\n"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ –∫—É—Ä—Å–æ–≤ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
        crypto_url = 'https://api.coingecko.com/api/v3/simple/price?ids=bitcoin,ethereum,the-open-network,solana&vs_currencies=usd,rub,cny,eur&include_24hr_change=true'
        crypto_response = requests.get(crypto_url)
        crypto_data = crypto_response.json()

        if crypto_response.status_code == 200:
            message += "\nüíπ <b>–ö—É—Ä—Å—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:</b>\n"
            for crypto, info in crypto_data.items():
                rate_usd = info['usd']
                rate_rub = info['rub']
                message += f"<b>{crypto.capitalize()}</b>: <b>{rate_rub}‚ÇΩ</b> / <b>{rate_usd}$</b>\n"

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
        await create_daily_chart()

        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≥—Ä–∞—Ñ–∏–∫–æ–º
        with open('daily_chart.png', 'rb') as photo:
            sent_message = await bot.send_photo(CHANNEL_ID, photo, caption=message, parse_mode='HTML')

        # –ó–∞–∫—Ä–µ–ø–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è
        await bot.pin_chat_message(CHANNEL_ID, sent_message.message_id)

    else:
        await bot.send_message(CHANNEL_ID, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å—ã –≤–∞–ª—é—Ç.", parse_mode='HTML')

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞
async def create_daily_chart():
    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö –æ —Ü–µ–Ω–∞—Ö –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    historical_data_url = 'https://api.coingecko.com/api/v3/coins/bitcoin/market_chart?vs_currency=usd&days=1'
    historical_response = requests.get(historical_data_url)
    historical_data = historical_response.json()

    if historical_response.status_code == 200 and 'prices' in historical_data:
        prices = historical_data['prices']
        timestamps = [price[0] for price in prices]
        values = [price[1] for price in prices]

        # –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö –º–µ—Ç–æ–∫ –≤ —Ñ–æ—Ä–º–∞—Ç datetime
        times = [np.datetime64(ts, 'ms') for ts in timestamps]

        # –°–æ–∑–¥–∞–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.figure(figsize=(10, 5))
        plt.plot(times, values, color='blue')
        plt.title('–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã Bitcoin –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ (USD)')
        plt.xlabel('–í—Ä–µ–º—è')
        plt.ylabel('–¶–µ–Ω–∞ (USD)')
        plt.xticks(rotation=45)
        plt.grid()

        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞
        plt.savefig('daily_chart.png')
        plt.close()
    else:
        logging.error("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –æ —Ü–µ–Ω–∞—Ö.")

# –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –∫—É—Ä—Å–æ–≤ –≤–∞–ª—é—Ç –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
scheduler.add_job(fetch_currency_rates, 'interval', seconds=60)

# –ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å–≤–æ–¥–∫–∏ –≤ 9:00 –ø–æ –º–æ—Å–∫–æ–≤—Å–∫–æ–º—É –≤—Ä–µ–º–µ–Ω–∏
scheduler.add_job(daily_summary, 'cron', hour=22, minute=10, timezone=moscow_tz)

scheduler.start()

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)